!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("katex"),require("katex/dist/katex.css")):"function"==typeof define&&define.amd?define(["katex","katex/dist/katex.css"],t):"object"==typeof exports?exports.KatexEditor=t(require("katex"),require("katex/dist/katex.css")):e.KatexEditor=t(e.katex,e["katex/dist/katex.css"])}(window,(function(e,t){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(2),n(3);function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=n(1),o=function(){function e(t){var n=t.data,i=t.config,r=t.api;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.api=r,this.data={tex:""},this.config={delimiter:"$$",placeholder:"Type here...",throwOnError:!1,displayMode:!0,leqno:!1,fleqn:!0,output:"html",emptyEditMode:"Try x+y",emptyViewMode:"Click here to type your equation..."},this.wrapper=null,this.editor=null,this.viewer=null,Object.assign(this.data,n),Object.assign(this.config,i)}var t,n,o;return t=e,o=[{key:"toolbox",get:function(){return{title:"Math",icon:'<svg width="16" height="16" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><path d="M29.425 22.96l1.387-2.96h1.188l-2 12h-30v-2.32l10.361-12.225-10.361-10.361v-7.094h30.625l1.375 8h-1.074l-0.585-1.215c-1.104-2.293-1.934-2.785-4.341-2.785h-20.688l11.033 11.033-9.294 10.967h16.949c3.625 0 4.583-1.299 5.425-3.040z"/></svg>'}}},{key:"CLASS",get:function(){return{wrapper:"aff-katex-wrapper",editor:"aff-katex-editor",viewer:"aff-katex-viewer",info:"aff-katex-viewer-info"}}}],(n=[{key:"render",value:function(){return this._setup(),this.wrapper}},{key:"_setup",value:function(){this._createWrapper(),this._createEditor(),this._createViewer(),this.wrapper.appendChild(this.editor),this.wrapper.appendChild(this.viewer)}},{key:"_createWrapper",value:function(){this.wrapper=document.createElement("div"),this.wrapper.classList.add(e.CLASS.wrapper)}},{key:"_createEditor",value:function(){var t=this;this.editor=document.createElement("div"),this.editor.contentEditable=!0,this.editor.placeholder=this.config.placeholder,this.editor.innerHTML=this.data.tex,this.editor.classList.add(e.CLASS.editor),this.data.tex&&(this.editor.hidden=!0),this.api.listeners.on(this.editor,"input",(function(){t._updateViewer()}),!1),this.api.listeners.on(this.editor,"blur",(function(e){t.editor.hidden=!0,t._updateViewer()}),!1)}},{key:"_createViewer",value:function(){var t=this;this.viewer=document.createElement("div"),this.viewer.classList.add(e.CLASS.viewer),this._updateViewer(),this.api.listeners.on(this.viewer,"click",(function(){t.editor.hidden=!1,t.editor.focus(),t._updateViewer()}),!1)}},{key:"_updateViewer",value:function(){if(this.editor.textContent.length>0)r.render(this.editor.textContent,this.viewer,this.config);else{this.viewer.innerHTML="";var t=document.createElement("SPAN");t.classList.add(e.CLASS.info),this.editor.hidden?t.innerText=this.config.emptyViewMode:t.innerText=this.config.emptyEditMode,this.viewer.appendChild(t)}}},{key:"_toHTML",value:function(e){}},{key:"validate",value:function(e){return!!e.tex.trim()}},{key:"save",value:function(e){return{tex:this.editor.textContent.trim()}}}])&&i(t.prototype,n),o&&i(t,o),e}();t.default=o},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){var i=n(4),r=n(5);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1},a=(i(e.i,r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a={};function s(e,t,n){for(var i=0;i<t.length;i++){var r={css:t[i][1],media:t[i][2],sourceMap:t[i][3]};a[e][i]?a[e][i](r):a[e].push(v(r,n))}}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function l(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var p=null,h=0;function v(e,t){var n,i,r;if(t.singleton){var o=h++;n=p||(p=c(t)),i=l.bind(null,n,o,!1),r=l.bind(null,n,o,!0)}else n=c(t),i=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r()),e=n.base?e+n.base:e,t=t||[],a[e]||(a[e]=[]),s(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){a[e]||(a[e]=[]),s(e,t,n);for(var i=t.length;i<a[e].length;i++)a[e][i]();a[e].length=t.length,0===a[e].length&&delete a[e]}}}},function(e,t,n){(t=n(6)(!1)).push([e.i,"span.aff-katex-viewer-info {\r\n    color: darkgray;\r\n}",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(a=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i=0;i<e.length;i++){var r=[].concat(e[i]);n&&(r[2]?r[2]="".concat(n," and ").concat(r[2]):r[2]=n),t.push(r)}},t}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,